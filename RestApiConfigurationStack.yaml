---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway

#Input parameters.
Parameters:
   RestApiName:
    Type: String
    Default: TEST-RestApi
    Description: Please enter the RestApiName to configure swagger.
  

Resources:

#Creating lambda function.
  GreetingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - "'use strict';"
            - ''
            - "// Greeter Lambda"
            - exports.handler = (event, context, callback) => {
            - "  console.log('Event:', JSON.stringify(event));"
            - "  const name = event.name || 'World';"
            - "  const response = {greeting: `Hello, ${name}!`};"
            - "  callback(null, response);"
            - "};"
      Description: A greeting function
      FunctionName: GreetingLambda
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs4.3
    DependsOn: GreetingApi
    
 #Creating lambda role.   
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      
#Creating REST-API     
#  GreetingApi:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      Name: Greeting API
#      Description: API used for Greeting requests
#      FailOnWarnings: true

      
#Creating REST-API     
  GreetingApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      #Parameters:
      TemplateURL: https://s3.amazonaws.com/cf-templates-1jkvv6ds43ed4-us-east-1/SwaagerConfigurationStack.yaml
     
     
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - GreetingLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: !Ref APINameOut
          - "/*"
          
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"
            
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
        
  GreetingApiStage:
    DependsOn:
    - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: APINameOut
      StageName: LATEST
      
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GreetingRequest
    Properties:
      RestApiId:
        Ref: APINameOut
      StageName: DummyStage
      
  GreetingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: APINameOut
      ParentId:
        Fn::GetAtt:
        - APINameOut
        - RootResourceId
      PathPart: greeting
      
  GreetingRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - GreetingLambda
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - "{"
              - '  "name": "$input.params(''name'')"'
              - "}"
      RequestParameters:
        method.request.querystring.name: false
      ResourceId:
        Ref: GreetingResource
      RestApiId:
        Ref: APINameOut
      MethodResponses:
      - StatusCode: 200
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: APINameOut
        - ".execute-api."
        - Ref: AWS::Region
        - ".amazonaws.com"